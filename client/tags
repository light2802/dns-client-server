!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
.PHONY	Makefile	/^.PHONY=check$/;"	m
A	dns.h	11;"	d
AAAA	dns.h	27;"	d
CNAME	dns.h	15;"	d
ChangetoDnsNameFormat	dns.c	/^void ChangetoDnsNameFormat(unsigned char *dns, unsigned char *host) {$/;"	f
DNS_H	dns.h	2;"	d
DNS_HEADER_SIZE	dns.h	4;"	d
DNS_QUERY_BUFFER_SIZE	dns.h	5;"	d
HINFO	dns.h	23;"	d
INTERNET	dns.h	10;"	d
MAX_IP_LEN	dns.h	6;"	d
MB	dns.h	17;"	d
MD	dns.h	13;"	d
MF	dns.h	14;"	d
MG	dns.h	18;"	d
MINFO	dns.h	24;"	d
MR	dns.h	19;"	d
MX	dns.h	25;"	d
NS	dns.h	12;"	d
PTR	dns.h	22;"	d
SOA	dns.h	16;"	d
TXT	dns.h	26;"	d
URL_PARSE_H	url_parse.h	2;"	d
WKS	dns.h	21;"	d
aa	dns.h	/^    unsigned char aa : 1;     \/\/ authoritive answer$/;"	m	struct:dns_header
ad	dns.h	/^    unsigned char ad : 1;    \/\/ authenticated data$/;"	m	struct:dns_header
add_count	dns.h	/^    unsigned short add_count;  \/\/ number of resource entries$/;"	m	struct:dns_header
ans_count	dns.h	/^    unsigned short ans_count;  \/\/ number of answer entries$/;"	m	struct:dns_header
auth_count	dns.h	/^    unsigned short auth_count; \/\/ number of authority entries$/;"	m	struct:dns_header
cd	dns.h	/^    unsigned char cd : 1;    \/\/ checking disabled$/;"	m	struct:dns_header
dns_header	dns.h	/^struct dns_header {$/;"	s
dns_query	dns.h	/^struct dns_query {$/;"	s
dns_servers	main.c	/^char *dns_servers = "127.0.0.53";$/;"	v
free_parsed_url	url_parse.c	/^void free_parsed_url(url_parser_url_t *url_parsed) {$/;"	f
get_info	dns.c	/^void get_info(char hostname[], char dns_server[]) {$/;"	f
host	url_parse.h	/^    char *host;$/;"	m	struct:url_parser_url
host_exists	url_parse.h	/^    int   host_exists;$/;"	m	struct:url_parser_url
host_ip	url_parse.h	/^    char *host_ip;$/;"	m	struct:url_parser_url
id	dns.h	/^    unsigned short id; \/\/ identification number$/;"	m	struct:dns_header
len	dns.h	/^    int            len;$/;"	m	struct:dns_query
main	main.c	/^int main(int argc, char **argv) {$/;"	f
make_dns_query	dns.c	/^struct dns_query make_dns_query(char *hostname, int type) {$/;"	f
name	dns.h	/^    unsigned char *  name;$/;"	m	struct:res_record
null	dns.h	20;"	d
opcode	dns.h	/^    unsigned char opcode : 4; \/\/ purpose of message$/;"	m	struct:dns_header
parse_url	url_parse.c	/^int parse_url(char *url, bool verify_host, url_parser_url_t *parsed_url) {$/;"	f
path	url_parse.h	/^    char *path;$/;"	m	struct:url_parser_url
port	url_parse.h	/^    int   port;$/;"	m	struct:url_parser_url
protocol	url_parse.h	/^    char *protocol;$/;"	m	struct:url_parser_url
q_count	dns.h	/^    unsigned short q_count;    \/\/ number of question entries$/;"	m	struct:dns_header
qclass	dns.h	/^    unsigned short qclass;$/;"	m	struct:question
qr	dns.h	/^    unsigned char qr : 1;     \/\/ query\/response flag$/;"	m	struct:dns_header
qtype	dns.h	/^    unsigned short qtype;$/;"	m	struct:question
query	dns.h	/^    unsigned char *query;$/;"	m	struct:dns_query
query_string	url_parse.h	/^    char *query_string;$/;"	m	struct:url_parser_url
question	dns.h	/^struct question {$/;"	s
ra	dns.h	/^    unsigned char ra : 1;    \/\/ recursion available$/;"	m	struct:dns_header
rcode	dns.h	/^    unsigned char rcode : 4; \/\/ response code$/;"	m	struct:dns_header
rd	dns.h	/^    unsigned char rd : 1;     \/\/ recursion desired$/;"	m	struct:dns_header
rdata	dns.h	/^    unsigned char *  rdata;$/;"	m	struct:res_record
rdlength	dns.h	/^    unsigned short rdlength;$/;"	m	struct:res_data
read_info	dns.c	/^void read_info(unsigned char *query_buffer, int buffer_len) {$/;"	f
read_name	dns.c	/^read_name(unsigned char *reader, unsigned char *buffer, int *count) {$/;"	f
res_data	dns.h	/^struct res_data {$/;"	s
res_record	dns.h	/^struct res_record {$/;"	s
resource	dns.h	/^    struct res_data *resource;$/;"	m	struct:res_record	typeref:struct:res_record::res_data
tc	dns.h	/^    unsigned char tc : 1;     \/\/ truncated message$/;"	m	struct:dns_header
ttl	dns.h	/^    unsigned int   ttl;$/;"	m	struct:res_data
type	dns.h	/^    unsigned short type;$/;"	m	struct:res_data
url_parser_url	url_parse.h	/^typedef struct url_parser_url {$/;"	s
url_parser_url_t	url_parse.h	/^} url_parser_url_t;$/;"	t	typeref:struct:url_parser_url
z	dns.h	/^    unsigned char z : 1;     \/\/ its z! reserved$/;"	m	struct:dns_header
